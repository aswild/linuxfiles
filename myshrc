#! /bin/bash
# Allen's unified custom shell config and alias script for bash and zsh

# Shell Options
export FIGNORE=".o:.pyc:~"
export EDITOR="vim"
stty -ixon
set -o ignoreeof

# add ~/bin to PATH if it's not already there
if [[ $PATH != *$HOME/bin* ]]; then
    export PATH=$HOME/bin:$PATH
fi
[[ -e ~/.dircolors ]] && eval `dircolors ~/.dircolors`

# Core aliases
alias ls='ls --color=auto --group-directories-first'
alias lsl='ls -alh --color=auto --group-directories-first'
alias g='egrep'
alias rmtmp='rm `ls -a | grep "~$"`'
alias df='df -h'
alias du='du -h'
alias tmus='tmux'
alias psa='ps aux'
alias psag='ps aux | grep '
alias lspath='echo $PATH | tr ":" "\n"'
alias zshrc='vim ~/.zshrc'
alias bashrc='vim ~/.bashrc'
alias myshrc='vim ~/myshrc'

alias cgrep="find -L . -name '*.[ch]' -print0 2>/dev/null | xargs -0 grep -n --color=auto"
alias rgrep="find -L . -type f -print0 2>/dev/null | xargs -0 grep --color=auto"

# networking/sudo aliases
alias ifconfig='sudo ifconfig'
alias ifdown='sudo ifdown'
alias ifup='sudo ifup'
alias ip='sudo ip'
alias ip6='sudo ip -6'
alias 'apt-get'='sudo apt-get'
alias apt='sudo apt'
alias yum='sudo yum'

# Conditional aliases
# ubuntu-specific
[[ -d /etc/update-motd.d ]] && alias update-motd='sudo run-parts /etc/update-motd.d | sudo tee /run/motd.dynamic'
[[ -x /usr/lib/update-notifier/update-motd-reboot-required ]] && alias rboot='/usr/lib/update-notifier/update-motd-reboot-required || echo "No Update Needed"'
alias findmod='find /lib/modules/$(uname -r) -name "*.ko" | grep -i'

# git aliases/functions
alias gs='git status'
alias gdn='git --no-pager diff'
alias gdh='git diff HEAD'
alias gdhn='git --no-pager diff HEAD'
alias glg='git log --oneline --decorate --color --graph'
alias glga='git log --oneline --decorate --color --graph --all'
alias gll='git log --decorate --color --graph --name-status'
alias glla='git log --decorate --color --graph --name-status --all'
alias gsh='git show --decorate'
alias gshn='git show --name-status'

[[ -n $ZSH_NAME ]] && [[ -x $(which smartless) ]] && export GIT_PAGER="$(which smartless)"

alias | grep -q gcp && unalias gcp
function gcp {
    git commit -m "$@" && git push
}

alias | grep -q gcap && unalias gcap
function gcap {
    git commit -a -m "$@" && git push
}

# wrap gitk in a function to automatically run it in the background
function gitk {
    command gitk "$@" &
}

function gbase {
    local dir=$(git rev-parse --show-toplevel 2>/dev/null)
    [[ -n $dir ]] && cd $dir
}

function rbase {
    local repodir=$PWD
    while true; do
        if [[ -d $repodir/.repo ]]; then
            cd $repodir
            return 0
        elif [[ $repodir == / ]]; then
            echo 'No .repo found' >&2
            return 1
        else
            repodir=$(dirname $repodir)
        fi
    done
}

# Core functions
function mdcd {
    mkdir $1 && cd $1
}

function cdls {
    cd $1 && ls
}

function up {
    local dir=$(dirname $PWD)
    while [[ $dir != / ]]; do
        if echo ${dir##*/} | grep -q -e "$1"; then
            cd $dir
            return 0
        fi
        dir=$(dirname $dir)
    done
    echo "dir matching pattern not found: $1"
    return 1
}

function ff {
    pattern=$1
    shift 1
    find -L . -name "*$pattern*" "$@"
}

function ffr {
    pattern=$1
    shift 1
    find -L . -regex ".*$pattern.*" "$@"
}

function cfind {
    find -L . -name '*.[ch]' | grep --color=auto "$@" 2>/dev/null
}

function vimf {
    if [[ ${1:0:1} == "-" ]]; then
        [[ $1 == *g* ]] && local _VIM="gvim --remote-tab-silent"
        [[ $1 == *c* ]] && local _CD=y
        shift
    fi
    [[ -z $_VIM ]] && local _VIM=vim
    local _pattern=$1
    shift
    _files=$(find -L . -path '*/.git' -prune -o -type f -name "*$_pattern*" -print "$@" 2>/dev/null)
    if [[ -n $_files ]]; then
        _nfiles=$(echo "$_files" | wc -l)
    else
        _nfiles=0
    fi
    if [[ $_nfiles == 0 ]]; then
        echo 'Error: no matches found'
        return 1
    elif [[ $_nfiles == 1 ]]; then
        local _selected=$_files
    else
        if [[ -n $ZSH_NAME ]]; then
            # cases like this are the one infuriating part of zsh
            local _files_arr=("${(@f)${_files}}")
        else
            local _files_arr=$_files
        fi
        PS3='Select Match> '
        select _sel in "$_files_arr[@]"; do
            if [[ -n $_sel ]]; then
                _selected=$_sel
            else
                echo 'Error: invalid selection'
                return 2
            fi
            unset _sel
            break
        done
    fi
    echo selected: $_selected
    if [[ $_CD == y ]]; then
        ( cd $(dirname $_selected) && $_VIM $(basename $_selected) )
    else
        $_VIM $_selected
    fi
}
alias gvimf="vimf -g"

function walltime {
    local starttime=$(date -u +%s)
    local prog=$1
    shift
    $prog "$@"
    local ret=$?
    local endtime=$(date -u +%s)
    local diff=$(($endtime - $starttime))
    local min=$(($diff / 60))
    local sec=$(($diff % 60))

    if (( $min >= 60 )); then
        local hour_s="$(($min / 60))h "
        min=$(($min % 60))
    else
        local hour_s=''
    fi

    if [[ $ret == 0 ]]; then
        local C="$(tput setaf 2)" # green
    else
        local C="$(tput setaf 1)" # red
    fi
    local R="$(tput sgr0)"

    echo -e "\n  $C'$prog $@' returned $ret in ${hour_s}${min}m ${sec}s$R"
    return $ret
}

[[ -n $ZSH_NAME ]] && alias make="walltime make"

if which smartless &>/dev/null; then
    function page {
        $@ | $(which smartless)
    }
else
    function page {
        $@ | less
    }
fi

# tmx function usually duplicated in ~/bin/tmx
function tmx {
    echo "TMUX"
    tmux ls &>/dev/null
    if [[ $? -eq 1 ]]
    then
        echo "starting new"
        tmux
    else
        echo "trying to attach"
        tmux attach
    fi
}

# gvim function for when running in cygwin
if [[ -e /cygdrive/c/Program\ Files\ \(x86\)/Vim/vim74/gvim.exe ]]; then
    export WINDOWS_HOME='C:\Users\'${HOME##*/}
    function gvim()
    {
        if [[ -z $1 ]]; then
            SHELL='' HOME=$WINDOWS_HOME cygstart '/cygdrive/c/Program Files (x86)/Vim/vim74/gvim.exe'
            return
        fi

        for i in "$@"; do
            SHELL='' HOME=$WINDOWS_HOME cygstart '/cygdrive/c/Program Files (x86)/Vim/vim74/gvim.exe' --remote-tab-silent \"$i\"
        done
    }
fi

# bash specific
if [[ -n $BASH ]]; then
    # immediate report background job changes
    set -b
    alias srcrc='source ~/.bashrc'
    PS1='\[\e[1;32m\][\u@\[\e[1;34m\]\h \[\e[1;36m\]\W\[\e[1;32m\]]\$\[\e[0m\] '

# zsh specific
elif [[ -n $ZSH_NAME ]]; then
    alias srcrc='source ~/.zshrc'
    alias mmv='noglob zmv -W'
    alias dh='dirs -v'
fi
